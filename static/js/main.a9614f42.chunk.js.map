{"version":3,"sources":["redux/sagas.js","redux/actions.js","redux/reducers/runTimerReducer.js","redux/reducers/timerValueReducer.js","redux/store.js","components/Timer.js","App.js","index.js"],"names":["helloSaga","sagaWorker","sagaWatcher","rootSaga","console","log","delay","ms","Promise","res","setTimeout","call","put","type","appState","takeEvery","all","runTaskReducer","state","action","timerValueReducer","value","getIsTimerRunning","isTimerRunning","getTimerValue","timerValue","rootReducer","combineReducers","runTimerReducer","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","connect","dispatch","runTimer","addOneToTimer","tick","useEffect","timerID","setInterval","clearInterval","className","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAEUA,G,WAMAC,G,WAYAC,G,WAIeC,GAtBzB,SAAUH,IAAV,iEACE,OADF,SACQI,QAAQC,IAAI,gBADpB,uCAIA,IAAMC,EAAQ,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAEzD,SAAUN,IAAV,uEACE,OADF,SACQU,YAAKL,EAAO,KADpB,OASE,OATF,SASQM,YAAI,CAACC,KAAM,gBAAiBC,aATpC,OAEQA,EAFR,8CAYA,SAAUZ,IAAV,iEACE,OADF,SACQa,YAAU,gBAAiBd,GADnC,uCAIe,SAAUE,IAAV,iEACb,OADa,SACPa,YAAI,CACRhB,IACAE,MAHW,uCCvBR,ICWQe,EAVQ,WAA4B,IAA3BC,EAA0B,wDAAXC,EAAW,uCAChD,OAAQA,EAAON,MACb,IDHqB,YCInB,OAAQK,EAEV,QACE,OAAOA,ICIEE,EAVW,WAAwB,IAAvBF,EAAsB,uDAAd,EAAGC,EAAW,uCAC/C,OAAQA,EAAON,MACb,IFF4B,mBEG1B,OAAOK,EAAQC,EAAOE,MAExB,QACE,OAAOH,ICCAI,EAAoB,SAAAJ,GAAK,OAAIA,EAAMK,gBACnCC,EAAgB,SAAAN,GAAK,OAAIA,EAAMO,YAEtCC,EAAcC,0BAAgB,CAClCJ,eAAgBK,EAChBH,WAAYL,IAGRS,EAAiBC,cAEjBC,EAAQC,sBACZN,EACAO,8BACEC,0BAAgBL,KAIpBA,EAAeM,IAAIhC,GAEJ4B,QCuBAK,eAVS,SAAAlB,GAAK,MAAK,CAChCK,eAAgBD,EAAkBJ,GAClCO,WAAYD,EAAcN,OAGD,SAAAmB,GAAQ,MAAK,CACtCC,SAAU,kBAAMD,EJ1Ca,CAAExB,KAJR,eI+CvB0B,cAAe,SAAClB,GAAD,OAAWgB,EJ1CC,SAAChB,GAAD,MAAY,CAAER,KAJX,mBAImCQ,SI0C9BkB,CAAclB,QAGpCe,EA9CD,SAAC,GAA6D,IAA3DE,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,cAAehB,EAAiC,EAAjCA,eAAgBE,EAAiB,EAAjBA,WAClDe,EAAO,WACXD,EAAc,IAehB,OAZAE,qBAAU,WACR,GAAIlB,EACF,IAAImB,EAAUC,aAAY,kBAAMH,MAAS,UAEzCD,GAAed,GAGjB,OAAO,WACLmB,cAAcF,OAKhB,oCACE,4BACEG,UAAWtB,EAAiB,gBAAiB,eAC7CuB,QAAS,WACPR,IACIf,GACFiB,MAIHjB,EAAiB,OAAS,OAE7B,6BACA,uCAAaE,EAAb,SC9BSsB,G,MAFH,kBAAM,kBAAC,EAAD,QCElBC,IAASC,OACP,kBAAC,IAAD,CAAUlB,MAAOA,GACf,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.a9614f42.chunk.js","sourcesContent":["import { put, takeEvery, all, call } from 'redux-saga/effects'\n\nfunction* helloSaga() {\n  yield console.log(\"Hello Sagas!\");\n}\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\nfunction* sagaWorker() {\n  yield call(delay, 1000);\n  const appState = ////;\n  //1\n  // JSON.parse(localStorage.getItem(\"stateApp\"));\n  //2 \n  //yield call(localStorage.getItem, \"stateApp\")\n  //3\n  //localStorage.getItem(\"stateApp\")\n  yield put({type: 'SET_APP_STATE', appState })\n}\n\nfunction* sagaWatcher() {\n  yield takeEvery('SET_APP_STATE', sagaWorker)\n}\n\nexport default function* rootSaga() {\n  yield all([\n    helloSaga(),\n    sagaWatcher()\n  ])\n}","//types\nexport const RUN_TIMER = 'RUN_TIMER';\nexport const ADD_ONE_TO_TIMER = 'ADD_ONE_TO_TIMER';\n\n//actions\nexport const runTimer = () => ({ type: RUN_TIMER });\nexport const addOneToTimer = (value) => ({ type: ADD_ONE_TO_TIMER, value });","import { RUN_TIMER } from \"../actions\";\n\nconst runTaskReducer = (state = false, action) => {\n  switch (action.type) {\n    case RUN_TIMER:\n      return !state;\n\n    default:\n      return state;\n  }\n};\n\nexport default runTaskReducer;","import { ADD_ONE_TO_TIMER } from \"../actions\";\n\nconst timerValueReducer = (state = 0, action) => {\n  switch (action.type) {\n    case ADD_ONE_TO_TIMER:\n      return state + action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default timerValueReducer;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootSaga from \"./sagas\";\nimport runTimerReducer from \"./reducers/runTimerReducer\";\nimport timerValueReducer from \"./reducers/timerValueReducer\";\n\n// selectors\nexport const getIsTimerRunning = state => state.isTimerRunning;\nexport const getTimerValue = state => state.timerValue;\n\nconst rootReducer = combineReducers({\n  isTimerRunning: runTimerReducer,\n  timerValue: timerValueReducer,\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware)\n  )\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getIsTimerRunning, getTimerValue } from '../redux/store'; \nimport { runTimer, addOneToTimer } from '../redux/actions'; \n\nconst Timer = ({ runTimer, addOneToTimer, isTimerRunning, timerValue }) => {\n  const tick = () => {\n    addOneToTimer(1)\n  };\n\n  useEffect(() => {\n    if (isTimerRunning) {\n      var timerID = setInterval(() => tick(0), 1000);\n    } else {\n      addOneToTimer(-timerValue)\n    }\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  return (\n    <>\n      <button\n        className={isTimerRunning ? 'btn btn--stop': 'btn btn--run' }\n        onClick={() => {\n          runTimer();\n          if (isTimerRunning) {\n            tick();\n          }\n        }}\n      >\n        {isTimerRunning ? 'Stop' : 'Run'}\n      </button>\n      <hr />\n      <div>Timer: {timerValue} </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isTimerRunning: getIsTimerRunning(state),\n  timerValue: getTimerValue(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  runTimer: () => dispatch(runTimer()),\n  addOneToTimer: (value) => dispatch(addOneToTimer(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import React from 'react';\nimport Timer from './components/Timer';\nimport \"./styles/button.css\"; \n\nconst App = () => <Timer />\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}